import matplotlib.pyplot as plt
import matplotlib.patches as patches
import time

n = 8  # Number of queens
delay = 0.5  # Delay between steps (in seconds)

fig, ax = plt.subplots()

def draw_board(board):
    ax.clear()
    # Draw squares
    for row in range(n):
        for col in range(n):
            color = 'white' if (row + col) % 2 == 0 else 'gray'
            square = patches.Rectangle((col, n - row - 1), 1, 1, facecolor=color)
            ax.add_patch(square)
    # Draw queens
    for row in range(len(board)):
        col = board[row]
        queen = patches.Circle((col + 0.5, n - row - 1 + 0.5), 0.3, color='red')
        ax.add_patch(queen)
    ax.set_xlim(0, n)
    ax.set_ylim(0, n)
    ax.set_aspect('equal')
    ax.axis('off')
    plt.pause(delay)

def solve(row, columns, diag1, diag2, board):
    if row == n:
        draw_board(board)
        time.sleep(1.5)
        return
    for col in range(n):
        if col in columns or (row - col) in diag1 or (row + col) in diag2:
            continue
        columns.add(col)
        diag1.add(row - col)
        diag2.add(row + col)
        board.append(col)
        draw_board(board)
        solve(row + 1, columns, diag1, diag2, board)
        columns.remove(col)
        diag1.remove(row - col)
        diag2.remove(row + col)
        board.pop()
        draw_board(board)

# Start animation
plt.ion()
solve(0, set(), set(), set(), [])
plt.ioff()
plt.show()
